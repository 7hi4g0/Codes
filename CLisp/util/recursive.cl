(defun lrec (rec &optional base)
  (labels ((self (lst)
			 (if (null lst)
				 (if (functionp base)
					 (funcall base)
					 base)
				 (funcall rec (car lst)
							  #'(lambda ()
								  (self (cdr lst)))))))
	#'self))

(defun ttrav (rec &optional (base #'identity))
  (labels ((self (tree)
			 (if (atom tree)
				 (if (functionp base)
					 (funcall base tree)
					 base)
				 (funcall rec (self (car tree))
							  (if (cdr tree)
								  (self (cdr tree)))))))
	#'self))

(defun trec (rec &optional (base #'identity))
  (labels
	((self (tree)
	   (if (atom tree)
		   (if (functionp base)
			   (funcall base tree)
			   base)
		   (funcall rec tree
						#'(lambda ()
							(self (car tree)))
						#'(lambda ()
							(if (cdr tree)
								(self (cdr tree))))))))
	#'self))
